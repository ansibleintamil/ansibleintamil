#Wait_for module is used to delay/pause the execution of the playbook based on the timeout condition and also resource availability.

---
 - hosts: all
   tasks:
    - debug:
        msg: "Playbook started running..."
    - wait_for:
        timeout: 100
    - debug:
        msg: "Playbook stopped the execution..."

###################################################################################
# prompt - to get input from the user (interactive way of getting inputs) to process the tasks.

---
 - hosts: all
   vars_prompt:
     - name: software_name
       prompt: "Enter the software name to install?"
       private: no
       #default: samba
     
     - name: password
       prompt: "Enter the password"
       private: yes
       encrypt: sha512_crypt
       confirm: yes

   tasks:
     - debug:
         msg: "The entered software is {{ software_name }}" 
       failed_when: software_name == ""

###################################################################################
#Tags at Tasks Level

---
 - hosts: all
   tasks:
     - command: cat /etc/passwd
       register: result
       tags: get_userlist

     - debug:
        var: result.stdout_lines
       tags: get_userlist 

     - user:
         name: arockia
         state: present
       tags: create_user


ansible-playbook tags.yml --tags create_user
ansible-playbook tags.yml --tags get_userlist
ansible-playbook tags.yml --skip-tags create_user

###################################################################################

# Tags at Play level

---
 - hosts: all
   tags: listuser
   tasks:
     - command: cat /etc/passwd
       register: result
       tags: get_userlist

     - debug:
        var: result.stdout_lines
       tags: get_userlist 


 - hosts: all
   tags: useraction
   tasks:
     - user:
         name: arockia
         state: "{{ state }}"
       tags: user_actions


ansible-playbook  playbook_tags.yml --tags listuser
ansible-playbook  playbook_tags.yml --skip-tags listuser -e "state=present"
############################################################################

# Ansible Vault is a feature of ansible that allows you to keep sensitive data such as passwords or keys in encrypted files, rather than as plaintext in playbooks or roles.

ansible-vault create vault_variable.yml
ansible-vault edit vault_variable.yml
ansible-vault view vault_variable.yml
ansible-vault rekey vault_variable.yml
ansible-vault encrypt vault_encrypt_decrypt.yml
ansible-vault decrypt vault_encrypt_decrypt.yml

#To run playbook with vault
ansible-playbook playbook.yml --ask-vault-pass
###########################################################################

#Log file creation - Blockinfile and Lineinfile

---
  - hosts: all
    tasks:
      - name: get files
        shell:
          ls /tmp/
        register: validate

      - name: Write results to logfile
        blockinfile:
          create: yes
          path: "/tmp/Ansible/log"
          insertafter: BOF
          block: "{{ validate.stdout }}"
          marker: "# {{ inventory_hostname }} {mark}"
        delegate_to: localhost

#############################################################################
#Pre-tasks with assert module used to validate the user inputs.

---
 - hosts: all
   vars_prompt:
     - name: password
       prompt: "Enter the application password"
       private: yes
   pre_tasks:
     - assert:
        that: password | length > 8
   tasks:
     - debug:
         var: password
##############################################################################

